{"ast":null,"code":"import React,{useState,useRef}from\"react\";import{useNavigate}from\"react-router-dom\";import logo from\"./constants/header-logo.png\";import InputDocument from\"./components/InputDocuments.js\";import DocumentsButtons from\"./components/DocumentsButtons\";import OutputDocument from\"./components/OutputDocument.js\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DocumentsPage=()=>{const[output,setOutput]=useState(\"\");const[files,setFiles]=useState([]);const fileInputRef=useRef(null);const[fileNames,setFileNames]=useState([]);const[downloadUrl,setDownloadUrl]=useState(null);const[splitFirstPage,setSplitFirstPage]=useState(1);const[splitLastPage,setSplitLastPage]=useState(1);const[downloadFilename,setDownloadFilename]=useState(\"result.pdf\");const navigate=useNavigate();const handleButtonClick=()=>{navigate(\"/\");};const handleClear=()=>{setFileNames([]);setFiles([]);setOutput(\"\");if(fileInputRef.current){fileInputRef.current.value=\"\";}setDownloadUrl(null);setSplitFirstPage(1);setSplitLastPage(1);};const handleConvert=async()=>{alert(\"The option is under development, please use sharepoint to convert docx to PDF.\");/*\n      if (fileNames.length !== 1) {\n        alert(\"Please upload only one file for conversion.\");\n        return;\n      }\n    \n      const file = files[0];\n      const fileType = file.type;\n    \n      if (\n        fileType !== \"application/pdf\" &&\n        fileType !== \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n      ) {\n        alert(\"Please upload a PDF or DOCX file.\");\n        return;\n      }\n    \n      const formData = new FormData();\n      formData.append(\"file\", file);\n    \n      try {\n        const response = await fetch(\"http://localhost:8080/DataToolbox/convertFile\", {\n          method: \"POST\",\n          body: formData,\n        });\n    \n        if (!response.ok) {\n          throw new Error(\"Conversion failed\");\n        }\n    \n        const blob = await response.blob(); // Get the response as a blob for download\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n    \n        \n        link.href = url;\n        link.setAttribute(\n          \"download\",\n          `converted_file.${fileType === \"application/pdf\" ? \"docx\" : \"pdf\"}`\n        ); // Set filename and extension based on conversion type\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n    \n      } catch (error) {\n        alert(\"Conversion failed:\", error);\n      }\n        */};const handleMerge=async()=>{if(files.length===0){alert(\"Please select at least one PDF to merge.\");return;}const allFilesArePdfs=files.every(file=>{return file.name.endsWith(\".pdf\");});if(!allFilesArePdfs){alert(\"Please select only PDF files.\");return;}const formData=new FormData();files.forEach(file=>formData.append(\"files\",file));try{const response=await fetch(\"http://localhost:8080/DataToolbox/mergeFiles\",{method:\"POST\",body:formData});if(response.ok){const blob=await response.blob();const url=window.URL.createObjectURL(blob);setDownloadUrl(url);setOutput(\"Files have been merged.\");setDownloadFilename(\"Merged.pdf\");}else{alert(\"Failed to merge PDFs\");}}catch(error){console.error(\"Error:\",error);}};const handlePdfGlobal=async(action,outputMessage)=>{if(files.length!==1){alert(\"Please select one PDF.\");return;}const allFilesArePdfs=files.every(file=>{return file.name.endsWith(\".pdf\");});if(!allFilesArePdfs){alert(\"Please select only PDF file.\");return;}const formData=new FormData();formData.append(\"file\",files[0]);// Your file here\nformData.append(\"firstPage\",splitFirstPage);// Set first page\nformData.append(\"lastPage\",splitLastPage);// Set last page\ntry{const response=await fetch(\"http://localhost:8080/DataToolbox/\"+action,{method:\"POST\",body:formData});if(response.ok){const blob=await response.blob();const url=window.URL.createObjectURL(blob);setDownloadUrl(url);setOutput(outputMessage);setDownloadFilename(\"result.pdf\");}else{alert(\"Failed to split PDFs\");}}catch(error){console.error(\"Error:\",error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo-container\",children:/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"Logo\",className:\"logo\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"title-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Documents Handler (PDF - DOCX)\"}),/*#__PURE__*/_jsx(\"button\",{className:\"new-page-button\",onClick:handleButtonClick,children:\"JSON - XML - EDI - PDF Handler\"})]})]}),/*#__PURE__*/_jsx(InputDocument,{fileNames:fileNames,setFileNames:setFileNames,fileInputRef:fileInputRef,setFiles:setFiles,files:files}),/*#__PURE__*/_jsx(DocumentsButtons,{handleClear:handleClear,handleConvert:handleConvert,handleMerge:handleMerge,handlePdfGlobal:handlePdfGlobal,splitFirstPage:splitFirstPage,setSplitFirstPage:setSplitFirstPage,splitLastPage:splitLastPage,setSplitLastPage:setSplitLastPage}),/*#__PURE__*/_jsx(OutputDocument,{downloadUrl:downloadUrl,output:output,downloadFilename:downloadFilename})]}),/*#__PURE__*/_jsx(\"div\",{className:\"footer-text\",children:\"Internally Developed - For Internal Use - Version 1.0\"})]});};export default DocumentsPage;","map":{"version":3,"names":["React","useState","useRef","useNavigate","logo","InputDocument","DocumentsButtons","OutputDocument","jsx","_jsx","jsxs","_jsxs","DocumentsPage","output","setOutput","files","setFiles","fileInputRef","fileNames","setFileNames","downloadUrl","setDownloadUrl","splitFirstPage","setSplitFirstPage","splitLastPage","setSplitLastPage","downloadFilename","setDownloadFilename","navigate","handleButtonClick","handleClear","current","value","handleConvert","alert","handleMerge","length","allFilesArePdfs","every","file","name","endsWith","formData","FormData","forEach","append","response","fetch","method","body","ok","blob","url","window","URL","createObjectURL","error","console","handlePdfGlobal","action","outputMessage","className","children","src","alt","onClick"],"sources":["/home/khweij/Documents/DiffFormatter/DataToolBox/src/DocumentsPage.js"],"sourcesContent":["import React, { useState, useRef} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport logo from \"./constants/header-logo.png\";\nimport InputDocument from \"./components/InputDocuments.js\";\nimport DocumentsButtons from \"./components/DocumentsButtons\";\nimport OutputDocument from \"./components/OutputDocument.js\"\n\nconst DocumentsPage = () => {\n    const [output, setOutput] = useState(\"\");\n    const [files, setFiles] = useState([]);\n    const fileInputRef = useRef(null);\n    const [fileNames, setFileNames] = useState([]);\n    const [downloadUrl, setDownloadUrl] = useState(null);\n    const [splitFirstPage, setSplitFirstPage] = useState(1);\n    const [splitLastPage, setSplitLastPage] = useState(1);  \n    const [downloadFilename, setDownloadFilename] = useState(\"result.pdf\");\n    const navigate = useNavigate();\n\n    const handleButtonClick = () => {\n        navigate(\"/\"); \n      };\n\n    const handleClear = () => {\n      setFileNames([])\n      setFiles([])\n      setOutput(\"\");\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n      setDownloadUrl(null);\n      setSplitFirstPage(1);\n      setSplitLastPage(1);\n    };\n\n    const handleConvert = async () => {\n      alert(\"The option is under development, please use sharepoint to convert docx to PDF.\");\n      /*\n      if (fileNames.length !== 1) {\n        alert(\"Please upload only one file for conversion.\");\n        return;\n      }\n    \n      const file = files[0];\n      const fileType = file.type;\n    \n      if (\n        fileType !== \"application/pdf\" &&\n        fileType !== \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n      ) {\n        alert(\"Please upload a PDF or DOCX file.\");\n        return;\n      }\n    \n      const formData = new FormData();\n      formData.append(\"file\", file);\n    \n      try {\n        const response = await fetch(\"http://localhost:8080/DataToolbox/convertFile\", {\n          method: \"POST\",\n          body: formData,\n        });\n    \n        if (!response.ok) {\n          throw new Error(\"Conversion failed\");\n        }\n    \n        const blob = await response.blob(); // Get the response as a blob for download\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n    \n        \n        link.href = url;\n        link.setAttribute(\n          \"download\",\n          `converted_file.${fileType === \"application/pdf\" ? \"docx\" : \"pdf\"}`\n        ); // Set filename and extension based on conversion type\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n    \n      } catch (error) {\n        alert(\"Conversion failed:\", error);\n      }\n        */\n    };    \n    \n    const handleMerge = async () => {\n      if (files.length === 0) {\n        alert(\"Please select at least one PDF to merge.\");\n        return;\n      }\n  \n      const allFilesArePdfs = files.every((file) => {\n        return file.name.endsWith(\".pdf\");\n      });\n    \n      if (!allFilesArePdfs) {\n        alert(\"Please select only PDF files.\");\n        return;\n      }\n\n      const formData = new FormData();\n      files.forEach((file) => formData.append(\"files\", file));\n  \n      try {\n        const response =  await fetch(\"http://localhost:8080/DataToolbox/mergeFiles\", {\n          method: \"POST\",\n          body: formData,\n        });\n  \n        if (response.ok) {\n          const blob = await response.blob();\n          const url = window.URL.createObjectURL(blob);\n          setDownloadUrl(url);\n          setOutput(\"Files have been merged.\");\n          setDownloadFilename(\"Merged.pdf\")\n        } else {\n          alert(\"Failed to merge PDFs\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n    const handlePdfGlobal = async (action, outputMessage) => {\n      if (files.length !== 1) {\n        alert(\"Please select one PDF.\");\n        return;\n      }\n  \n      const allFilesArePdfs = files.every((file) => {\n        return file.name.endsWith(\".pdf\");\n      });\n    \n      if (!allFilesArePdfs) {\n        alert(\"Please select only PDF file.\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"file\", files[0]); // Your file here\n      formData.append(\"firstPage\", splitFirstPage); // Set first page\n      formData.append(\"lastPage\", splitLastPage);  // Set last page\n    \n      try {\n        const response = await fetch(\"http://localhost:8080/DataToolbox/\" + action, {\n          method: \"POST\",\n          body: formData,\n        });\n    \n        if (response.ok) {\n          const blob = await response.blob();\n          const url = window.URL.createObjectURL(blob);\n          setDownloadUrl(url);\n          setOutput(outputMessage);\n          setDownloadFilename(\"result.pdf\")\n        } else {\n          alert(\"Failed to split PDFs\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n\n    return (\n    <div className=\"App\">\n      <div className=\"main-content\">\n        <header className=\"header\">\n        <div className=\"logo-container\">\n            <img src={logo} alt=\"Logo\" className=\"logo\" />\n        </div>\n        <div className=\"title-container\">\n            <h1 className=\"title\">Documents Handler (PDF - DOCX)</h1>\n            <button className=\"new-page-button\" onClick={handleButtonClick}>JSON - XML - EDI - PDF Handler</button>\n        </div>\n        </header>\n        <InputDocument\n        fileNames={fileNames}\n        setFileNames={setFileNames}\n        fileInputRef={fileInputRef} \n        setFiles={setFiles}\n        files={files}\n        />\n        <DocumentsButtons \n        handleClear={handleClear} \n        handleConvert={handleConvert}  \n        handleMerge={handleMerge} \n        handlePdfGlobal={handlePdfGlobal}\n        splitFirstPage={splitFirstPage}\n        setSplitFirstPage={setSplitFirstPage}\n        splitLastPage={splitLastPage}\n        setSplitLastPage={setSplitLastPage}\n        />\n        <OutputDocument downloadUrl={downloadUrl} output={output} downloadFilename={downloadFilename}/>\n        </div>\n        <div className=\"footer-text\">\n          Internally Developed - For Internal Use - Version 1.0\n        </div>\n    </div>\n    );\n    };\n\nexport default DocumentsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}